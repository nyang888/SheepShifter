<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>S_Shepherd_Enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// VARIABLES
image_speed = .25

depth = 480 - (y + sprite_height);

numSheep = irandom_range(0,50);
hp = 20;
randomize();

xSpeed_orig = -5;
xSpeed = xSpeed_orig;
ySpeed = 0;

yChange_range = 5;
yChange_timer_max = 15;
yChange_timer = 0;

hurt_timer_max = 15;
hurt_timer = 0;xSpeed_orig = -5;

attack_anim_timer_max = 15;
attack_anim_timer = 0;
attack_timer_max = irandom_range(15,100);
attack_timer = 0;

xSpeed = xSpeed_orig;
ySpeed = 0;

attack = 0;

idle = 2;
dead = 3;
hurt = 4;
phase = idle;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CREATE SHEEP

for (i = 1; i &lt;= numSheep; i++) {
    randomize();
    
    yLocation = random_range((y+sprite_height/2)-50,(y+sprite_height/2)+50);
    xLocation = random_range((x+sprite_width),(x+sprite_width)+100);
    
    instance_create(xLocation, yLocation - 32, O_Enemy_Sheep);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MOVEMENT

if (phase == idle) {
    xSpeed = xSpeed_orig;
    sprite_index = S_Shepherd_Enemy;
    
    if(yChange_timer == yChange_timer_max){
        ySpeed = random_range(-yChange_range,yChange_range);
        yChange_timer = 0;
    } else {
        yChange_timer++;
    }
    
    if((ySpeed + y) &lt; 0) {
        y = 0;
    } else if ((ySpeed + y) &gt; (480 - sprite_height)) {
        y = 480 - sprite_height;
    } else {
        y = y + ySpeed;
    }
}

x = x + xSpeed;
depth = 480 - (y + sprite_height);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GETTING HURT

if (phase == hurt) {    
    if (sprite_index == S_Shepherd_Enemy) {
        sprite_index = S_Shepherd_Enemy_Hurt;
    } else if (sprite_index == S_Shepherd_Enemy_Attack) {
        sprite_index = S_Shepherd_Enemy_Attack_Hurt;
    }
    
    hurt_timer++;
    
    if(hurt_timer == hurt_timer_max) {
        phase = idle;
        O_Shepherd.phase = O_Shepherd.idle;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ATTACK PLAYER

if (instance_exists(O_Shepherd)){
    attack_timer++;
    
    if(attack_timer == attack_timer_max) {
        attack = 1;
        attack_anim_timer = 0;
        O_Shepherd.hp--;
audio_play_sound(M_Ahh,2,false);
        audio_play_sound(M_Beam,1,false);
        instance_create(x,y,O_Shake_Small);     
    }

    if (attack == 1) {
        if(sprite_index == S_Shepherd_Enemy) {
            sprite_index = S_Shepherd_Enemy_Attack;
        }
        
        attack_anim_timer++;
        
        if(attack_anim_timer == attack_anim_timer_max) {
            attack = 0;
            attack_timer = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// KILL IF OFFSCREEN

if ((x + sprite_width) &lt; 0) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HURT

instance_create(x,y,O_Shake_Small);

audio_play_sound(M_Ahh,2,false);
audio_play_sound(M_Beam,1,false);

phase = hurt;
hurt_timer = 0;

O_Shepherd.phase = O_Shepherd.attack;

hp--;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEATH

if (hp == 0) {
    instance_create(x,y,O_Human_Poof);
    instance_create(x,y,O_Shake_Big);
    O_Shepherd.phase = O_Shepherd.idle;
    O_Shepherd.numSheep = numSheep;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DRAW BEAM
if(phase == hurt) {
    depth = 1000;
    draw_line_width_color(x+(sprite_width/2),y+(sprite_height/2),
                            O_Shepherd.x + 110, O_Shepherd.y + 66,
                            5,c_white,c_white);
    depth = 480 - (y + sprite_height);
}
if(attack == 1) {
    depth = 1000;
    draw_line_width_color(x+15,y+67,
                            O_Shepherd.x + O_Shepherd.sprite_width/2, 
                            O_Shepherd.y + O_Shepherd.sprite_height/2,
                            5,c_red,c_red);
    depth = 480 - (y + sprite_height);
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
